services:

  vote:
    build: ./vote
    ports:
      - "8080:8080"
    networks:
      - front
      - back
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  worker:
    build: ./worker
    networks:
      - back
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  result:
    build: ./result
    ports:
      - "8888:8888"
    env_file:
      - ./result/.env
    networks:
      - front
      - back
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  redis:
    image: redis:alpine
    networks:
      - back
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  db:
    image: postgres:17
    env_file:
      - .env
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - back
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  front:
  back:


volumes:
  db-data:
